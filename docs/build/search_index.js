var documenterSearchIndex = {"docs":
[{"location":"planck/","page":"Planck","title":"Planck","text":"    Modules = [Planck]\n    Order   = [:function, :type]","category":"page"},{"location":"planck/#Main.BandPyrometry.Planck.Dₗibb-Tuple{Any, Any}","page":"Planck","title":"Main.BandPyrometry.Planck.Dₗibb","text":"Dₗibb(λ,T)\n\nReturns a three-element tuple of (1.bb intensity,2.its first and 3.second derivative \nwith respect to the wavelentgh)\n\nInput:\n    λ - wavelength, μm\n    T - temperature, K\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.Dₜibb!-Tuple{Tuple{AbstractVector, AbstractVector, AbstractVector}, AbstractVector, Any}","page":"Planck","title":"Main.BandPyrometry.Planck.Dₜibb!","text":"Dₜibb!(input_tuple, λ::AbstractVector,T)\n\n\nIn-place filling the tuple of (bb intensity, its first ,and second ) derivatives with respect to temperature\n\nInput:\n    input_tuple, [Nx0 vector or nothing,Nx0 vector or nothing, Nx0 vector or nothing]\n    λ - wavelength, μm, [Nx0]\n    T - temperature, K\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.a₁₂₃!-Tuple{AbstractMatrix, AbstractVector, Float64}","page":"Planck","title":"Main.BandPyrometry.Planck.a₁₂₃!","text":"a₁₂₃!(amat::AbstractMatrix,λ::AbstractVector,T::Float64)\n    In-place filling of the intermediate matrix\n    a₁=C₂/(λ*T)  - amat first column\n    a₂ = 1/(eᵃ¹-1)  - amat second column \n    a₃ = eᵃ¹/(eᵃ¹-1) - amat third column\n\n    Input:\n        amat - matrix of intermediate coefficients size [Nx3]\n        λ - wavelength in μm,  [Nx0]\n        T - temperature in Kelvins\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.band_power-Tuple{Any}","page":"Planck","title":"Main.BandPyrometry.Planck.band_power","text":"band_power(T;λₗ=0.0,λᵣ=Inf,tol=1e-6)\n\nTotal bb with temperature T integral intensity within \nthe spectral range λₗ...λᵣ (by default the range is 0...inf)\ntol - tolerance of intehration\n\nInput:\n    T - temperature,Kelvins\n    (optional)\n    λₗ - left wavelength boundary, μm\n    λᵣ - right wavelength boundary, μm\n    tol - intergation tolerance\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.ibb!-Tuple{AbstractVector, AbstractVector, AbstractMatrix}","page":"Planck","title":"Main.BandPyrometry.Planck.ibb!","text":"ibb!(i::AbstractVector,λ::AbstractVector,amat::AbstractMatrix)::Nothing\n\nIn-place blackbody intensity with intermediate coefficients provided externally, [W/m2-sr-mkm]\nIbb =  C₁*(λ⁻⁵)*a₂ , where\na₁=C₂/(λ*T)  - amat first column\na₂ = 1/(eᵃ¹-1)  - amat second column \nInput:\n    i - BB intensity, [Nx0]\n    λ - wavelength in μm,  [Nx0]\n    amat - matrix of intermediate coefficients,  [Nx3]\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.ibb!-Tuple{AbstractVector, AbstractVector, Float64}","page":"Planck","title":"Main.BandPyrometry.Planck.ibb!","text":"ibb!(i::AbstractVector,λ::AbstractVector,T::Float64)\n\nIn-place blackbody intensity filling, [W/m2-sr-mkm]\nIbb = (λ⁻⁵)* C₁/(eᵃ¹-1) , where a₁=C₂/(λ*T)\nInput:\n    i - bb intensity vector, [Nx0]\n    λ - wavelength in μm, [Nx0]\n    T - temperature in Kelvins\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.ibb-Tuple{AbstractVector, AbstractMatrix}","page":"Planck","title":"Main.BandPyrometry.Planck.ibb","text":"ibb(λ::AbstractVector,amat::AbstractMatrix)\nBlackbody intensity with intermediate matrix provided externally, [W/m2-sr-mkm]\n    Ibb =  C₁*(λ⁻⁵)*a₂ , where\n    a₁=C₂/(λ*T)  - amat first column\n    a₂ = 1/(eᵃ¹-1)  - amat second column \n    Input:\n        amat - matrix of intermediate coefficients,  [Nx3]\n        λ - wavelength in μm,  [Nx0]\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.ibb-Tuple{AbstractVector, AbstractVector}","page":"Planck","title":"Main.BandPyrometry.Planck.ibb","text":"ibb(λ::AbstractVector,T::AbstractVector)\nBlackbody intensity , [W/m2-sr-mkm]\nIbb = (λ⁻⁵)* C₁/(eᵃ¹-1) , where a₁=C₂/(λ*T)\nInput:\n    λ - wavelength in μm, [Nx0]\n    T - temperature in Kelvins [Mx0]\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.ibb-Tuple{Any, Any}","page":"Planck","title":"Main.BandPyrometry.Planck.ibb","text":"ibb(λ,T)\nBlackbody intensity , [W/m2-sr-mkm]\nIbb = (λ⁻⁵)* C₁/(eᵃ¹-1) , where a₁=C₂/(λ*T)\nInput:\n    λ - wavelength in μm\n    T - temperature in Kelvins\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.power-Tuple{Any}","page":"Planck","title":"Main.BandPyrometry.Planck.power","text":"power(T)\n\nReturns integral (over the spectrum) intensity of BB at temperature T\n\nInput:\n    T - temperature, K\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.tₘ-Tuple{Any}","page":"Planck","title":"Main.BandPyrometry.Planck.tₘ","text":"tₘ(λ)\n\nThe temperature of BB having maximum at wavelength λ\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.λₘ-Tuple{Any}","page":"Planck","title":"Main.BandPyrometry.Planck.λₘ","text":"λₘ(T)\n\nThe wavelength (in μm) of bb intensity maximum vs temperature T \nargmax(Planck(T)) \n\nInput:\n    T - temperature in Kelvins\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.∇²ₗibb-Tuple{Any, Any}","page":"Planck","title":"Main.BandPyrometry.Planck.∇²ₗibb","text":"∇²ₗibb(λ,T)\n\nBB intensity second derivative with respect to the wavelength\n\nInput:\n    λ - wavelength, μm\n    T - temperature, K\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.∇²ₜibb!-Tuple{AbstractMatrix{Float64}, AbstractVector{Float64}, AbstractVector{Float64}}","page":"Planck","title":"Main.BandPyrometry.Planck.∇²ₜibb!","text":"∇²ₜibb!(h::AbstractMatrix{Float64},λ::AbstractVector{Float64},T::AbstractVector{Float64})\n\nIn-place bb intensity second order derivative with respect to temperature\n\nd²Ibb/dT² = C₁*(eᵃ¹/(eᵃ¹-1)²)*(C₂/(λ⁶*T³))*[(C₂/(λ*T))*(2*eᵃ¹/(eᵃ¹-1)-1)-2]\nd²Ibb/dT² = C₁*(eᵃ¹/(eᵃ¹-1)²)*(a₁/(λ⁵*T²))*[a₁*(2*eᵃ¹/(eᵃ¹-1) -1)-2]\na₁=C₂/(λ*T)\na₂ = 1/(eᵃ¹-1)   #  1/expm1(a1)\na₃ = eᵃ¹/(eᵃ¹-1) #  exp(a)/expm1(a)\nd²Ibb/dT² = C₁*a₂*a₃*(a₁/(λ⁵*T²))*[a₁*(2*a₃ - 1))-2]\n\nInput :\n          h  - to be filled, [Nx0]\n          λ - wavelength in μm, [Nx0]\n          T - tmperature in Kelvins\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.∇²ₜibb!-Tuple{AbstractVector{Float64}, AbstractVector{Float64}, Float64, AbstractMatrix{Float64}}","page":"Planck","title":"Main.BandPyrometry.Planck.∇²ₜibb!","text":"∇²ₜibb!(h::AbstractVector{Float64},λ::AbstractVector{Float64},T::Float64,amat::AbstractMatrix{Float64})::Nothing\n\nIn-place bb intensity second order derivative with respect to temperature with \nintermediate matrix provided externally\n\nd²Ibb/dT² = C₁*(eᵃ¹/(eᵃ¹-1)²)*(C₂/(λ⁶*T³))*[(C₂/(λ*T))*(2*eᵃ¹/(eᵃ¹-1)-1)-2]\nd²Ibb/dT² = C₁*(eᵃ¹/(eᵃ¹-1)²)*(a₁/(λ⁵*T²))*[a₁*(2*eᵃ¹/(eᵃ¹-1) -1)-2]\na₁=C₂/(λ*T)\na₂ = 1/(eᵃ¹-1)   #  1/expm1(a1)\na₃ = eᵃ¹/(eᵃ¹-1) #  exp(a)/expm1(a)\nd²Ibb/dT² = C₁*a₂*a₃*(a₁/(λ⁵*T²))*[a₁*(2*a₃ - 1))-2]\n\nInput :\n        h  - to be filled, [Nx0]\n        λ - wavelength in μm, [Nx0]\n        T - temperature in Kelvins\n        amat - matrix of intermediate coefficients,  [Nx3]\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.∇²ₜibb!-Tuple{AbstractVector{Float64}, AbstractVector{Float64}, Float64}","page":"Planck","title":"Main.BandPyrometry.Planck.∇²ₜibb!","text":"∇²ₜibb!(h::AbstractVector{Float64},λ::AbstractVector{Float64},T::Float64)\n\nIn-place bb intensity second order derivative with respect to temperature\n\nd²Ibb/dT² = C₁*(eᵃ¹/(eᵃ¹-1)²)*(C₂/(λ⁶*T³))*[(C₂/(λ*T))*(2*eᵃ¹/(eᵃ¹-1)-1)-2]\nd²Ibb/dT² = C₁*(eᵃ¹/(eᵃ¹-1)²)*(a₁/(λ⁵*T²))*[a₁*(2*eᵃ¹/(eᵃ¹-1) -1)-2]\na₁=C₂/(λ*T)\na₂ = 1/(eᵃ¹-1)   #  1/expm1(a1)\na₃ = eᵃ¹/(eᵃ¹-1) #  exp(a)/expm1(a)\nd²Ibb/dT² = C₁*a₂*a₃*(a₁/(λ⁵*T²))*[a₁*(2*a₃ - 1))-2]\n\nInput :\n          h  - to be filled, [Nx0]\n          λ - wavelength in μm, [Nx0]\n          T - tmperature in Kelvins\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.∇²ₜibb!-Tuple{AbstractVector{Float64}, Float64, AbstractMatrix{Float64}, AbstractVector{Float64}}","page":"Planck","title":"Main.BandPyrometry.Planck.∇²ₜibb!","text":"∇²ₜibb!(h::AbstractVector{Float64},T::Float64,amat::AbstractMatrix{Float64},∇i::AbstractVector{Float64})::Nothing\n\nIn-place bb intensity second order derivative with respect to temperature \nwith provided both the intermediate matrix amat and the the Planck function first derivative\n\nd²Ibb/dT² = C₁*(eᵃ¹/(eᵃ¹-1)²)*(C₂/(λ⁶*T³))*[(C₂/(λ*T))*(2*eᵃ¹/(eᵃ¹-1)-1)-2]\nd²Ibb/dT² = C₁*(eᵃ¹/(eᵃ¹-1)²)*(a₁/(λ⁵*T²))*[a₁*(2*eᵃ¹/(eᵃ¹-1) -1)-2]\na₁=C₂/(λ*T)\na₂ = 1/(eᵃ¹-1)   #  1/expm1(a1)\na₃ = eᵃ¹/(eᵃ¹-1) #  exp(a)/expm1(a)\nd²Ibb/dT² = C₁*a₂*a₃*(a₁/(λ⁵*T²))*[a₁*(2*a₃ - 1))-2]\n    as far as \n        Ibb = (λ⁻⁵)* C₁*a₂\n    and \n        dIbb/dT = C₁*a₃*a₂*a₁*(1/(λ⁵*T)) = a₃*a₁*Ibb/T \n    hense\n        d²Ibb/dT² = C₁*a₂*a₃*a₁*(1/(λ⁵*T²))*[a₁*(2*a₃ - 1))-2] \n            = [a₃*a₁*Ibb/T^2]*[a₁*(2*a₃ - 1))-2] \n             = [(dIbb/dT)/T]*[a₁*(2*a₃ - 1))-2] \nInput :\n        h  - to be filled, [Nx0]\n        λ - wavelength in μm, [Nx0]\n        amat - matrix of intermediate coefficients,  [Nx3]\n        ∇i - vector of bb intensity first derivatives, [Nx0]\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.∇²ₜibb-Tuple{Any, Any}","page":"Planck","title":"Main.BandPyrometry.Planck.∇²ₜibb","text":"∇²ₜibb(λ,T)\n\nBB intensity second derivative with respect to temperature\n\nd²Ibb/dT² = C₁*(eᵃ¹/(eᵃ¹-1)²)*(C₂/(λ⁶*T³))*[(C₂/(λ*T))*(2*eᵃ¹/(eᵃ¹-1)-1)-2]\nd²Ibb/dT² = C₁*(eᵃ¹/(eᵃ¹-1)²)*(a₁/(λ⁵*T²))*[a₁*(2*eᵃ¹/(eᵃ¹-1) -1)-2]\na₁=C₂/(λ*T)\na₂ = 1/(eᵃ¹-1)   #  1/expm1(a1)\na₃ = eᵃ¹/(eᵃ¹-1) #  exp(a)/expm1(a)\nd²Ibb/dT² = C₁*a₂*a₃*(a₁/(λ⁵*T²))*[a₁*(2*a₃ - 1))-2]\n\nInput :\n          λ - wavelength in μm\n          T - tmperature in Kelvins\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.∇ₗibb-Tuple{Any, Any}","page":"Planck","title":"Main.BandPyrometry.Planck.∇ₗibb","text":"∇ₗibb(λ,T)\n\n\nBB intensity first derivative with respect to the wavelength\n\nInput:\n    λ - wavelength, μm\n    T - temperature, K\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.∇ₜibb!-Tuple{AbstractMatrix, AbstractVector, AbstractVector}","page":"Planck","title":"Main.BandPyrometry.Planck.∇ₜibb!","text":"∇ₜibb!(g::AbstractMatrix,λ::AbstractVector,T::AbstractVector)\n\nIn-place BB intensity first derivative with respect to temperature\na₁=C₂/(λ*T)\na₂ = 1/(eᵃ¹-1)   #  1/expm1(a1)\na₃ = eᵃ¹/(eᵃ¹-1) #  exp(a)/expm1(a)\ndIbb/dT = C₁*a₃*a₂*a₁*(1/(λ⁵*T))\nInput:\n    g - vector to be filled, [Nx0]\n    λ - wavelength in μm, [Nx0]\n    T - temperature in Kelvins\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.∇ₜibb!-Tuple{AbstractVector, AbstractVector, Any, AbstractMatrix}","page":"Planck","title":"Main.BandPyrometry.Planck.∇ₜibb!","text":"∇ₜibb!(g::AbstractVector,λ::AbstractVector,T,amat::AbstractMatrix)\n\nIn-place bb intensity first derivative with respect to temperature\nwith externally provided amat  - matrix with columns a₁,a₂,a₃\n\ndIbb/dT = C₁*(eᵃ¹/(eᵃ¹-1)²)*(C₂/(λ⁶*T²))\na₁=C₂/(λ*T)\na₂ = 1/(eᵃ¹-1)   #  1/expm1(a1)\na₃ = eᵃ¹/(eᵃ¹-1) #  exp(a)/expm1(a)\ndIbb/dT = C₁*a₃*a₂*a₁*(1/(λ⁵*T))\n\nInput:\n    g - to be filled, [Nx0]\n    λ - wavelength in μm, [Nx0]\n    T - temperature in Kelvins\n    amat - matrix of intermediate coefficients, [Nx3]\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.∇ₜibb!-Tuple{AbstractVector, Any, AbstractMatrix, AbstractVector}","page":"Planck","title":"Main.BandPyrometry.Planck.∇ₜibb!","text":"∇ₜibb!(g::AbstractVector,T, amat::AbstractMatrix,i::AbstractVector)::Nothing\n\nIn-place bb intensity first derivative with respect to temperature\nwith externally provided amat  - matrix with columns a₁,a₂,a₃\n\ndIbb/dT = C₁*(eᵃ¹/(eᵃ¹-1)²)*(C₂/(λ⁶*T²))\na₁=C₂/(λ*T)\na₂ = 1/(eᵃ¹-1)   #  1/expm1(a1)\na₃ = eᵃ¹/(eᵃ¹-1) #  exp(a)/expm1(a)\ndIbb/dT = C₁*a₃*a₂*a₁*(1/(λ⁵*T))\nas far as Ibb = C₁*a₂/λ⁵\ndIbb/dT = a₃*a₁*C₁*(a₂/λ⁵)*(1/T)=a₃*a₁*Ibb/T\n\nInput:\n    g - to be filled, [Nx0]\n    λ - wavelength in μm, [Nx0]\n    T - temperature in Kelvins\n    amat - matrix of intermediate coefficients, [Nx3]\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.∇ₜibb-Tuple{AbstractVector, Any, AbstractMatrix}","page":"Planck","title":"Main.BandPyrometry.Planck.∇ₜibb","text":"∇ₜibb(λ::AbstractVector,T,amat::AbstractMatrix)\n\nBB intensity first derivative with respect to temperature\nwith externally provided matrix of intermediate coefficients\ndIbb/dT = C₁*(eᵃ¹/(eᵃ¹-1)²)*(C₂/(λ⁶*T²))\na₁=C₂/(λ*T)\na₂ = 1/(eᵃ¹-1)   \na₃ = eᵃ¹/(eᵃ¹-1) \ndIbb/dT = C₁*a₃*a₂*a₁*(1/(λ⁵*T))\nInput:\n    λ - wavelength in μm, [Nx0]\n    T - temperature in Kelvins\n    amat - matrix of intermediate coefficients, [Nx3]\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.∇ₜibb-Tuple{Any, Any}","page":"Planck","title":"Main.BandPyrometry.Planck.∇ₜibb","text":"∇ₜibb(λ,T)\n\nBB intensity first derivative with respect to temperature\ndIbb/dT = C₁*(eᵃ¹/(eᵃ¹-1)²)*(C₂/(λ⁶*T²))\na₁=C₂/(λ*T)\na₂ = 1/(eᵃ¹-1)   #  1/expm1(a1)\na₃ = eᵃ¹/(eᵃ¹-1) #  exp(a)/expm1(a)\ndIbb/dT = C₁*a₃*a₂*a₁*(1/(λ⁵*T))\nInput:\n    λ - wavelength in μm\n    T - temperature in Kelvins\n\n\n\n\n\n","category":"method"},{"location":"planck/#Main.BandPyrometry.Planck.∫ibbₗ-Tuple{Any}","page":"Planck","title":"Main.BandPyrometry.Planck.∫ibbₗ","text":"∫ibbₗ(T;λₗ=0.0,λᵣ=Inf,tol=1e-6)\n\nRelative (with respect to the integral power in the whole spectrum)\nintegral intensity of bb in the spectral range λₗ...λᵣ (by default the range is 0...inf)\n\nInput:\n    T - temperature,Kelvins\n    (optional)\n    λₗ - left wavelength boundary, μm\n    λᵣ - right wavelength boundary, μm\n    tol - intergation tolerance\n\n\n\n\n\n","category":"method"},{"location":"bandpyrometry/#Functions-and-type-to-fit-the-temperature-of-blackbody-and-real-surface-thermal-emission","page":"BandPyrometry","title":"Functions and type to fit the temperature of blackbody and real surface thermal emission","text":"","category":"section"},{"location":"bandpyrometry/","page":"BandPyrometry","title":"BandPyrometry","text":"    Modules = [BandPyrometry]\n    Order   = [:function, :type]","category":"page"},{"location":"bandpyrometry/#Base.:*-Tuple{Main.BandPyrometry.VanderMatrix, AbstractVector}","page":"BandPyrometry","title":"Base.:*","text":"*(V::VanderMatrix,a::AbstractVector)\n\nVanderMatrix object can be directly multiplyed by a vector\n\n\n\n\n\n","category":"method"},{"location":"bandpyrometry/#Main.BandPyrometry.Vander-Tuple{AbstractArray, Number}","page":"BandPyrometry","title":"Main.BandPyrometry.Vander","text":"Vander(x::AbstractArray, poly_degree::Number;poly_type::String=\"stand\")\n\nCreates VanderMatrix object of predefied type, all supported polynomial type can \nbe found in @supported_polynomial_types\n\n\n\n\n\n","category":"method"},{"location":"bandpyrometry/#Main.BandPyrometry.box_constraints-Tuple{BandPyrometryPoint}","page":"BandPyrometry","title":"Main.BandPyrometry.box_constraints","text":"box_constraints(bp::BandPyrometryPoint)\n\nEvaluates box-constraint of the problem\n\n\n\n\n\n","category":"method"},{"location":"bandpyrometry/#Main.BandPyrometry.denormalize_x-Tuple{AbstractVector, Any, Any}","page":"BandPyrometry","title":"Main.BandPyrometry.denormalize_x","text":"denormalize_x(normalized_x::AbstractVector, x_min,x_max)\n\nCreates normal vector from one created with @normalize_x function\n\n\n\n\n\n","category":"method"},{"location":"bandpyrometry/#Main.BandPyrometry.disc-Tuple{AbstractVector, BandPyrometryPoint}","page":"BandPyrometry","title":"Main.BandPyrometry.disc","text":"disc(x::AbstractVector,bp::BandPyrometryPoint)\n\nFills discrepancy value, bp.e_p strores the residual function norm\n\n\n\n\n\n","category":"method"},{"location":"bandpyrometry/#Main.BandPyrometry.em_cons!-Tuple{AbstractArray, AbstractVector, BandPyrometryPoint}","page":"BandPyrometry","title":"Main.BandPyrometry.em_cons!","text":"Evaluates maximum emissivity in the whole wavelength range \nThis function is used in the constraints\n\n\n\n\n\n","category":"method"},{"location":"bandpyrometry/#Main.BandPyrometry.emissivity!-Tuple{BandPyrometryPoint, AbstractVector}","page":"BandPyrometry","title":"Main.BandPyrometry.emissivity!","text":"Fills emissivity for the current BandPyrometry point\n\n\n\n\n\n","category":"method"},{"location":"bandpyrometry/#Main.BandPyrometry.eval_poly-Tuple{Main.BandPyrometry.StandPolyWrapper, Any}","page":"BandPyrometry","title":"Main.BandPyrometry.eval_poly","text":"Function to evaluate polynomials\n\n\n\n\n\n","category":"method"},{"location":"bandpyrometry/#Main.BandPyrometry.feval!-Tuple{BandPyrometryPoint, AbstractVector}","page":"BandPyrometry","title":"Main.BandPyrometry.feval!","text":"Fills emissivity and emission spectra\n\n\n\n\n\n","category":"method"},{"location":"bandpyrometry/#Main.BandPyrometry.grad!-Tuple{AbstractVector, AbstractVector, BandPyrometryPoint}","page":"BandPyrometry","title":"Main.BandPyrometry.grad!","text":"grad!(g::AbstractVector,x::AbstractVector,bp::BandPyrometryPoint)\n\nIn-place filling of the gradient of BandPyrometryPoint at point x\n\n\n\n\n\n","category":"method"},{"location":"bandpyrometry/#Main.BandPyrometry.hess!-Tuple{Any, AbstractVector, BandPyrometryPoint}","page":"BandPyrometry","title":"Main.BandPyrometry.hess!","text":"hess!(h,x::AbstractVector,bp::BandPyrometryPoint)\n\nIn-place filling of hessian of BandPyrometryPoint at point x\n\n\n\n\n\n","category":"method"},{"location":"bandpyrometry/#Main.BandPyrometry.hess_approx!-Tuple{Any, AbstractVector, BandPyrometryPoint}","page":"BandPyrometry","title":"Main.BandPyrometry.hess_approx!","text":"hess_approx!(ha, x::AbstractVector,bp::BandPyrometryPoint)\n\nIn-place filling of the approximate hessian (Hₐ = Jᵀ*J (J - Jacobian)) \nof BandPyrometryPoint at point\n\n\n\n\n\n","category":"method"},{"location":"bandpyrometry/#Main.BandPyrometry.jacobian!-Tuple{AbstractVector, BandPyrometryPoint}","page":"BandPyrometry","title":"Main.BandPyrometry.jacobian!","text":"jacobian!(x::AbstractVector,bp::BandPyrometryPoint)\n\nFills the Jacobian matrix\n\n\n\n\n\n","category":"method"},{"location":"bandpyrometry/#Main.BandPyrometry.normalize_x-Tuple{AbstractVector}","page":"BandPyrometry","title":"Main.BandPyrometry.normalize_x","text":"normalize_x(x::AbstractVector)\n\nMakes all elements of vector x to fit in range -1...1\nreturns normalized vector , xmin and xmax values\nAll elements of x must be unique\n\n\n\n\n\n","category":"method"},{"location":"bandpyrometry/#Main.BandPyrometry.optimizer_switch-Tuple{String}","page":"BandPyrometry","title":"Main.BandPyrometry.optimizer_switch","text":"optimizer_switch(name::String;is_constraint::Bool=false,\n            is_lagrange_constraint::Bool=false)\nReturns the appropriate optimizer constructor\nInput:\n    name - the name of th eoptimizer, \n    is_constraint - is box constraint problem formulation, \n    is_lagrange_constraint - use Lagrange constraints (supported only by IPNewton)\n\n\n\n\n\n","category":"method"},{"location":"bandpyrometry/#Main.BandPyrometry.polyfit-Union{Tuple{T}, Tuple{Main.BandPyrometry.VanderMatrix, T, T}} where T<:(AbstractVector)","page":"BandPyrometry","title":"Main.BandPyrometry.polyfit","text":"polyfit(V::VanderMatrix,x::T,y::T) where T<:AbstractVector\n\nFits data x - coordinates, y - values using the VanderMatrix\nbasis function\n\nInput:\n    x - coordinates, [Nx0]\n    y - values, [Nx0]\nreturns tuple with vector of polynomial coefficints, values of y_fitted at x points\n    and the norm of goodness of fit\n\n\n\n\n\n","category":"method"},{"location":"bandpyrometry/#Main.BandPyrometry.residual!-Tuple{BandPyrometryPoint, AbstractVector}","page":"BandPyrometry","title":"Main.BandPyrometry.residual!","text":"Fills emissivity, emission spectra and evaluates residual vector\n\n\n\n\n\n","category":"method"},{"location":"bandpyrometry/#Core.Union-Tuple{Number}","page":"BandPyrometry","title":"Core.Union","text":"(poly::Union{LegPolyWrapper,TrigPoly})(x::Number)\n\nFunction returns the summation of polynomials values with coefficients \nLegPolyWrapper wraps the LegendrePolynomials.jl library function to \nmake it consistent with Polynomials.jl \nTrigPoly simple type for trigonometric function polynomils\n\n\n\n\n\n","category":"method"},{"location":"bandpyrometry/#Main.BandPyrometry.BandPyrometryPoint","page":"BandPyrometry","title":"Main.BandPyrometry.BandPyrometryPoint","text":"    BandPyrometryPoint type stores data of thermal emission spectrum of a real body with \n    emissivity polynomial approximation, and  its first and second derivatives\n    it also stores \"measurements\" vector which further can be fitted, it also \n    provides the constructor BandPyrometryPoint(I_measured,λ,initial_x,polynomial_type) \n    where:\n        -  I_measured is a measured spectrum\n        -  λ - wavelength vector (in μm)\n        - initial_x - starting parameters vector (initial_x[end] - starting temperature,\n            x[1:end-1] - emissivity approximation coefficients)\n        - polynomial_type - string of polynomial (this value governs the Vandermonde matrix form)\n\n\n\n\n\n","category":"type"},{"location":"bandpyrometry/#Main.BandPyrometry.EmPoint","page":"BandPyrometry","title":"Main.BandPyrometry.EmPoint","text":"EmPoint type stores data on thermal emission spectrum and its  first and second derivatives     it also stores \"Measurements \" vector which further can be fitted? it also provides the constructor     EmPoint(Imeasured,λ) -  Imeasured is a measured spectrum                           -  λ - wavelength vector (in μm)\n\n\n\n\n\n","category":"type"},{"location":"bandpyrometry/#Main.BandPyrometry.VanderMatrix","page":"BandPyrometry","title":"Main.BandPyrometry.VanderMatrix","text":"VanderMatrix(λ,polynomial_degree,MatrixType,polynomial_type)\n\nThis type stores the Vandemonde matrix (fundamental matrix of basis functions),\nsupports various types of internal polynomials including provided externally\nStructure VanderMatrix has the following fields:\n    v - the matrix itself (each column of this matrix is the value of basis function)\n    x_first -  first element of the initial vector \n    x_last  -  the last value of the initial vector\n    xi - normalized vector \n    poly_type  - string of polynomial type name (nothing depends on this name)\n    poly_constructor  - the constructor of the polynomial object, accepts the value of \n        polynomial coefficients and returns a callable object to evaluate the obtained \n        polynomial at a praticular point. V-matrix is filled by first creating the polynomial \n        obj with only one non-zero polynomial coefficient and then sending the values of xi\n        to the created object\n\n\n\n\n\n","category":"type"},{"location":"jcamp-reader/#small-JCAMP-DX4.24-format-files-reader","page":"JDXreader","title":"small JCAMP-DX=4.24 format files reader","text":"","category":"section"},{"location":"jcamp-reader/","page":"JDXreader","title":"JDXreader","text":"    Modules = [JDXreader]\n    Order   = [:function, :type]","category":"page"},{"location":"jcamp-reader/#Main.BandPyrometry.JDXreader.read!-Tuple{Main.BandPyrometry.JDXreader.JDXfile}","page":"JDXreader","title":"Main.BandPyrometry.JDXreader.read!","text":"read!(jdx::JDXfile)\n\nfills precreated JDXfile\n\n\n\n\n\n","category":"method"},{"location":"jcamp-reader/#Main.BandPyrometry.JDXreader.read_jdx_file-Tuple{String}","page":"JDXreader","title":"Main.BandPyrometry.JDXreader.read_jdx_file","text":"read_jdx_file(file_name::String)\n\nRead JCAMP format file file_name - full file name,\nInput: \n    file_name - full file name\nreturns named tuple with fields :\n       x - coordinate (wavelength, wavenumber or other)\n       y - data\n       headers - dictionary in \"String => value\" format with \n       headers values\n\n\n\n\n\n","category":"method"},{"location":"jcamp-reader/#Main.BandPyrometry.JDXreader.JDXfile-Tuple{String}","page":"JDXreader","title":"Main.BandPyrometry.JDXreader.JDXfile","text":"JDXfile(file_name::String)\n\nCreates JDXreader object from full file name\n\n\n\n\n\n","category":"method"},{"location":"pyrometers/#module-with-various-pyrometers-types","page":"Pyrometers","title":"module with various pyrometers types","text":"","category":"section"},{"location":"pyrometers/","page":"Pyrometers","title":"Pyrometers","text":"    Modules = [Pyrometers]\n    Order   = [:function, :type]","category":"page"},{"location":"pyrometers/#Base.isless-Tuple{Main.BandPyrometry.Pyrometers.Pyrometer, Main.BandPyrometry.Pyrometers.Pyrometer}","page":"Pyrometers","title":"Base.isless","text":"Base.isless(p1::Pyrometer,p2::Pyrometer)\n\nVector of Pyrometer objects can be sorted using isless\n\n\n\n\n\n","category":"method"},{"location":"pyrometers/#Main.BandPyrometry.Pyrometers.fit_ϵ-Tuple{Main.BandPyrometry.Pyrometers.Pyrometer, Float64, Float64}","page":"Pyrometers","title":"Main.BandPyrometry.Pyrometers.fit_ϵ","text":"fit_ϵ(p::Pyrometer,Tmeasured::Float64,Treal::Float64)\n\nOptimizes the emissivity of the pyrometer to make measured by the pyrometer temperature fit\nfit the real temperature\n\nInput:\n    p - pyrometer object\n    Treal - real temperature of the surface, Kelvins\n    Tmeasured - temperature measured by the pyrometer, Kelvins\n\n\n\n\n\n","category":"method"},{"location":"pyrometers/#Main.BandPyrometry.Pyrometers.fit_ϵ-Tuple{Vector{Main.BandPyrometry.Pyrometers.Pyrometer}, Float64, Vector{Float64}}","page":"Pyrometers","title":"Main.BandPyrometry.Pyrometers.fit_ϵ","text":"fit_ϵ(p::Vector{Pyrometer},Treal::Float64,Tmeasured::Vector{Float64})\n\nOptimizes the emissivity of the pyrometer to make measured by the pyrometer temperature fit\nfit the real temperature\n\nInput:\n    p - pyrometer objects vector , [Nx0]\n    Treal - real temperature of the surface, Kelvins\n    Tmeasured - temperatures measured by the pyrometer, Kelvins, [Nx0]\n\n\n\n\n\n","category":"method"},{"location":"pyrometers/#Main.BandPyrometry.Pyrometers.fit_ϵ_wavelength-Tuple{Main.BandPyrometry.Pyrometers.Pyrometer, Float64, Float64}","page":"Pyrometers","title":"Main.BandPyrometry.Pyrometers.fit_ϵ_wavelength","text":"fit_ϵ_wavelength(p::Pyrometer,Tmeasured::Float64,Treal::Float64)\n\nFits emissivity and returns it as a vector of the same size as pyrometer's wavelength region\nSome pyrometers has 2-wavelength, other work on a single wavelength, for two-wavelength pyrometers\ne_out will be a two-element vector\nInput:\n    p - pyrometer object\n    Tmeasured - temperature measured by the pyrometer, Kelvins\n    Treal - real temeprature of the surface, Kelvins\n\n\n\n\n\n","category":"method"},{"location":"pyrometers/#Main.BandPyrometry.Pyrometers.full_wavelength_range-Tuple{}","page":"Pyrometers","title":"Main.BandPyrometry.Pyrometers.full_wavelength_range","text":"full_wavelength_range()\n\nCreates the wavelengths vector covered by the pyrometers_types\n\n\n\n\n\n","category":"method"},{"location":"pyrometers/#Main.BandPyrometry.Pyrometers.produce_pyrometers-Tuple{}","page":"Pyrometers","title":"Main.BandPyrometry.Pyrometers.produce_pyrometers","text":"produce_pyrometers()\n\nCreates the vector of all supported pyrometers\n\n\n\n\n\n","category":"method"},{"location":"pyrometers/#Main.BandPyrometry.Pyrometers.set_emissivity-Tuple{Main.BandPyrometry.Pyrometers.Pyrometer, Float64}","page":"Pyrometers","title":"Main.BandPyrometry.Pyrometers.set_emissivity","text":"set_emissivity(p::Pyrometer,em_value::Float64)\n\nSetter for spectral emissivity\n\n\n\n\n\n","category":"method"},{"location":"pyrometers/#Main.BandPyrometry.Pyrometers.switch_the_type-Tuple{Float64}","page":"Pyrometers","title":"Main.BandPyrometry.Pyrometers.switch_the_type","text":"switch_the_type(λ::Float64)\n\nReturns the type (which can be used as a key of pyrometers_types dict) depending on the wavelengh\nInput:\n    λ - wavelength in μm\n\n\n\n\n\n","category":"method"},{"location":"pyrometers/#Main.BandPyrometry.Pyrometers.wavelength_number-Tuple{}","page":"Pyrometers","title":"Main.BandPyrometry.Pyrometers.wavelength_number","text":"wavelength_number()\n\nReturns the length of wavelengths vector covered by the pyrometers_types\n\n\n\n\n\n","category":"method"},{"location":"#BandPyrometry.jl","page":"Home","title":"BandPyrometry.jl","text":"","category":"section"},{"location":"#General-description","page":"Home","title":"General description","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<p>Detailed description of the underlying mathematics is available:  <a href=\"../src/supplementary_v_0_0_1.pdf\">Download PDF</a>.</p>","category":"page"},{"location":"","page":"Home","title":"Home","text":"Planck.jl module contains functions to evaluate: \nBlackbody spectral intensity \nBlackbody intensity first and second derivatives with respect to wavelength and temperature \nBlackbody integral intensity over the wavelength band \nBandPyrometry.jl module \nEmPoint type formulates the least-square problem to optimize the temperature of blackbody \nBandPyrometryPoint type formulates the least-square problem to optimize the temperature and spectral emissivity approximation to the real surface (with emissivity dependent on wavelength) formulates the least-square problem to optimize the temperature of blackbody \nMethods to solve the least-square optimization problem using zero,first and second order methods using optimizers provided by Optim.jl package \nJDXreader.jl module\nSmall module to read files in spectroscopic format (JCAMP-DX=4.24 version) \nPyrometers.jl module\nBrings Pyrometer type (partial radiation pyrometer)","category":"page"},{"location":"#Contact","page":"Home","title":"Contact","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To contact me, please do it through the GitHub repository.","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Copyright (c) 2024 Roman Mironov","category":"page"},{"location":"","page":"Home","title":"Home","text":"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.","category":"page"},{"location":"","page":"Home","title":"Home","text":"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.","category":"page"}]
}
